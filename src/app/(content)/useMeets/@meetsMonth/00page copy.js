"use client";

import { db } from "@/lib/firebaseConfig";
import { ref, onValue } from "firebase/database";
import { useEffect, useState } from "react";
import "@/app/(content)/meets/meetsroom.css"; // ‚úÖ css ‡πÅ‡∏¢‡∏Å
import "@/app/(content)/useMeets/usemeetModule.css";

export default function MeetsMonthPage() {
  const [meetsList, setMeetsList] = useState([]);
  const [currentMonth, setCurrentMonth] = useState("");
  const [currentYear, setCurrentYear] = useState("");

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏õ‡∏µ ‡∏û.‡∏®.
  const formatThaiMonthYear = (dateString) => {
    const date = new Date(dateString);
    const monthsThai = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå",
      "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°",
      "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
      "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°",
      "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°",
      "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
      "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô",
      "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°",
      "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô",
      "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°",
    ];
    const month = monthsThai[date.getMonth()];
    const year = date.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á ‡∏Ñ.‡∏®. ‚Üí ‡∏û.‡∏®.
    return `${month} ${year}`;
  };

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  useEffect(() => {
    const meetsRef = ref(db, "Request_Meeting");
    const unsubscribe = onValue(meetsRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const now = new Date();
        const monthNow = now.toLocaleString("default", { month: "long" });
        const yearNow = now.getFullYear();

        setCurrentMonth(monthNow);
        setCurrentYear(yearNow);

        const filtered = Object.entries(data)
          .map(([id, item]) => ({ id, ...item }))
          .filter((item) => {
            const parts = item.dateUse.split("-");
            if (parts.length !== 3) return false;
            const [day, month, year] = parts;
            return (
              month.toLowerCase() === monthNow.toLowerCase() &&
              parseInt(year) === yearNow
            );
          })
          .sort((a, b) => {
            const parseDate = (d) => {
              const [day, month, year] = d.dateUse.split("-");
              return new Date(`${month} ${day}, ${year}`);
            };
            return parseDate(a) - parseDate(b); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡πâ‡∏≠‡∏¢ ‚Üí ‡∏°‡∏≤‡∏Å
          });

        setMeetsList(filtered);
      } else {
        setMeetsList([]);
      }
    });
    return () => unsubscribe();
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏° forUse
  const getForUseClass = (forUse) => {
    switch (forUse) {
      case "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°":
        return "foruse-meeting";
      case "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Ñ‡∏ì‡∏∞":
        return "foruse-faculty";
      case "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏†‡∏≤‡∏Ñ":
        return "foruse-department";
      case "‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏¢‡πà‡∏≠‡∏¢":
        return "foruse-submeeting";
      case "‡∏™‡∏±‡∏°‡∏°‡∏ô‡∏≤":
        return "foruse-seminar";
      case "‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©":
        return "foruse-lecture";
      case "‡∏≠‡∏ö‡∏£‡∏°":
        return "foruse-training";
      default:
        return "";
    }
  };

  return (
    <div className="carousel-container">
      <h1 className="title-use">
        Consoltation Room ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏û‡∏∏‡∏ó‡∏ò
      </h1>
      <p className="content-use">
        ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏Ñ‡∏ì‡∏∞‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
        ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πà‡∏Ñ‡∏ì‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÅ‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏•‡∏≤‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢
      </p>

      {/* üü¢ ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏´‡∏±‡∏ß‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ */}
      <div className="month-label">
        {meetsList.length > 0
          ? formatThaiMonthYear(meetsList[0].dateChange || meetsList[0].dateUse)
          : ""}
      </div>

      <div className="meets-grid">
        {meetsList.length > 0 ? (
          meetsList.map((meetsItem) => {
            const day = meetsItem.dateUse.split("-")[0];
            return (
              <div
                key={meetsItem.id}
                className={`meet-card ${getForUseClass(meetsItem.forUse)}`}
              >
                {/* Row ‡∏ã‡πâ‡∏≤‡∏¢ */}
                <div className="left-date">
                  <div className="date-box">{day}</div>
                </div>
                {/* Row ‡∏Ç‡∏ß‡∏≤ */}
                <div className="right-info">
                  <div className="info-text">{meetsItem.forUse}</div>
                  <div className="info-text">{meetsItem.agencyUse}</div>
                  <div className="info-text">{meetsItem.beginTime}</div>
                </div>
              </div>
            );
          })
        ) : (
          <p>No Meeting available this month.</p>
        )}
      </div>
    </div>
  );
}
